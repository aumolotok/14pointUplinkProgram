//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Autotests.UploadService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Credentials", Namespace="http://schemas.datacontract.org/2004/07/Appulate.DocumentUpload.Service.DataContr" +
        "acts")]
    [System.SerializableAttribute()]
    public partial class Credentials : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsHash {
            get {
                return this.IsHashField;
            }
            set {
                if ((this.IsHashField.Equals(value) != true)) {
                    this.IsHashField = value;
                    this.RaisePropertyChanged("IsHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UploadOptions", Namespace="http://schemas.datacontract.org/2004/07/Appulate.DocumentUpload.Service.DataContr" +
        "acts")]
    [System.SerializableAttribute()]
    public partial class UploadOptions : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Autotests.UploadService.Client ClientField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Autotests.UploadService.Client Client {
            get {
                return this.ClientField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientField, value) != true)) {
                    this.ClientField = value;
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Client", Namespace="http://schemas.datacontract.org/2004/07/Appulate.DocumentUpload.Service.DataContr" +
        "acts")]
    [System.SerializableAttribute()]
    public partial class Client : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Autotests.UploadService.ClientType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Autotests.UploadService.ClientType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientType", Namespace="http://schemas.datacontract.org/2004/07/Appulate.Domain.Entities")]
    public enum ClientType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Printer = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OutlookPlugin = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExplorerPlugin = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Email = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Forms = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ApiCall = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Service = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UploadResponse", Namespace="http://schemas.datacontract.org/2004/07/Appulate.DocumentUpload.Service.Response")]
    [System.SerializableAttribute()]
    public partial class UploadResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthenticationResponse", Namespace="http://schemas.datacontract.org/2004/07/Appulate.DocumentUpload.Service.Response")]
    [System.SerializableAttribute()]
    public partial class AuthenticationResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Autotests.UploadService.AuthenticationStatus StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordHash {
            get {
                return this.PasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordHashField, value) != true)) {
                    this.PasswordHashField = value;
                    this.RaisePropertyChanged("PasswordHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Autotests.UploadService.AuthenticationStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthenticationStatus", Namespace="http://schemas.datacontract.org/2004/07/Appulate.Uplink.Service.DocumentUpload.Im" +
        "pl")]
    public enum AuthenticationStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fail = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SetupDriverOptions", Namespace="http://schemas.datacontract.org/2004/07/Appulate.DocumentUpload.Service.DataContr" +
        "acts")]
    [System.SerializableAttribute()]
    public partial class SetupDriverOptions : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Autotests.UploadService.Client ClientField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Autotests.UploadService.Client Client {
            get {
                return this.ClientField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientField, value) != true)) {
                    this.ClientField = value;
                    this.RaisePropertyChanged("Client");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SetupDriverResponse", Namespace="http://schemas.datacontract.org/2004/07/Appulate.DocumentUpload.Service.Response")]
    [System.SerializableAttribute()]
    public partial class SetupDriverResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DownloadPrinterUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EmbedFontsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxFileSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageTextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DownloadPrinterUrl {
            get {
                return this.DownloadPrinterUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.DownloadPrinterUrlField, value) != true)) {
                    this.DownloadPrinterUrlField = value;
                    this.RaisePropertyChanged("DownloadPrinterUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EmbedFonts {
            get {
                return this.EmbedFontsField;
            }
            set {
                if ((this.EmbedFontsField.Equals(value) != true)) {
                    this.EmbedFontsField = value;
                    this.RaisePropertyChanged("EmbedFonts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxFileSize {
            get {
                return this.MaxFileSizeField;
            }
            set {
                if ((this.MaxFileSizeField.Equals(value) != true)) {
                    this.MaxFileSizeField = value;
                    this.RaisePropertyChanged("MaxFileSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageText {
            get {
                return this.MessageTextField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageTextField, value) != true)) {
                    this.MessageTextField = value;
                    this.RaisePropertyChanged("MessageText");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BootstrapperLogType", Namespace="http://schemas.datacontract.org/2004/07/Appulate.Uplink.Service.DocumentUpload.Im" +
        "pl.BootstrapperLog")]
    public enum BootstrapperLogType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UplinkSetupLog = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WeblinkSetupLog = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://appulate", ConfigurationName="UploadService.IUploadService", SessionMode=System.ServiceModel.SessionMode.NotAllowed)]
    public interface IUploadService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appulate/IUploadService/Upload", ReplyAction="http://appulate/IUploadService/UploadResponse")]
        Autotests.UploadService.UploadResponse Upload(Autotests.UploadService.Credentials credentials, Autotests.UploadService.UploadOptions options, byte[] content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appulate/IUploadService/Upload", ReplyAction="http://appulate/IUploadService/UploadResponse")]
        System.Threading.Tasks.Task<Autotests.UploadService.UploadResponse> UploadAsync(Autotests.UploadService.Credentials credentials, Autotests.UploadService.UploadOptions options, byte[] content);
        
        // CODEGEN: Generating message contract since the wrapper name (UploadStreamRequest) of message UploadStreamRequest does not match the default value (UploadStream)
        [System.ServiceModel.OperationContractAttribute(Action="http://appulate/IUploadService/UploadStream", ReplyAction="http://appulate/IUploadService/UploadStreamResponse")]
        Autotests.UploadService.UploadStreamResponse UploadStream(Autotests.UploadService.UploadStreamRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appulate/IUploadService/UploadStream", ReplyAction="http://appulate/IUploadService/UploadStreamResponse")]
        System.Threading.Tasks.Task<Autotests.UploadService.UploadStreamResponse> UploadStreamAsync(Autotests.UploadService.UploadStreamRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appulate/IUploadService/Authenticate", ReplyAction="http://appulate/IUploadService/AuthenticateResponse")]
        Autotests.UploadService.AuthenticationResponse Authenticate(Autotests.UploadService.Credentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appulate/IUploadService/Authenticate", ReplyAction="http://appulate/IUploadService/AuthenticateResponse")]
        System.Threading.Tasks.Task<Autotests.UploadService.AuthenticationResponse> AuthenticateAsync(Autotests.UploadService.Credentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appulate/IUploadService/SetupDriver", ReplyAction="http://appulate/IUploadService/SetupDriverResponse")]
        Autotests.UploadService.SetupDriverResponse SetupDriver(Autotests.UploadService.Credentials credentials, Autotests.UploadService.SetupDriverOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appulate/IUploadService/SetupDriver", ReplyAction="http://appulate/IUploadService/SetupDriverResponse")]
        System.Threading.Tasks.Task<Autotests.UploadService.SetupDriverResponse> SetupDriverAsync(Autotests.UploadService.Credentials credentials, Autotests.UploadService.SetupDriverOptions options);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appulate/IUploadService/UploadBootstrapperLog", ReplyAction="http://appulate/IUploadService/UploadBootstrapperLogResponse")]
        void UploadBootstrapperLog(Autotests.UploadService.BootstrapperLogType type, string file, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://appulate/IUploadService/UploadBootstrapperLog", ReplyAction="http://appulate/IUploadService/UploadBootstrapperLogResponse")]
        System.Threading.Tasks.Task UploadBootstrapperLogAsync(Autotests.UploadService.BootstrapperLogType type, string file, string userLogin);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadStreamRequest", WrapperNamespace="http://appulate", IsWrapped=true)]
    public partial class UploadStreamRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://appulate")]
        public Autotests.UploadService.Credentials Credentials;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://appulate")]
        public Autotests.UploadService.UploadOptions Options;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://appulate", Order=0)]
        public System.IO.Stream ContentStream;
        
        public UploadStreamRequest() {
        }
        
        public UploadStreamRequest(Autotests.UploadService.Credentials Credentials, Autotests.UploadService.UploadOptions Options, System.IO.Stream ContentStream) {
            this.Credentials = Credentials;
            this.Options = Options;
            this.ContentStream = ContentStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadStreamResponse", WrapperNamespace="http://appulate", IsWrapped=true)]
    public partial class UploadStreamResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://appulate")]
        public string Message;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://appulate")]
        public string Url;
        
        public UploadStreamResponse() {
        }
        
        public UploadStreamResponse(string Message, string Url) {
            this.Message = Message;
            this.Url = Url;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUploadServiceChannel : Autotests.UploadService.IUploadService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadServiceClient : System.ServiceModel.ClientBase<Autotests.UploadService.IUploadService>, Autotests.UploadService.IUploadService {
        
        public UploadServiceClient() {
        }
        
        public UploadServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UploadServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Autotests.UploadService.UploadResponse Upload(Autotests.UploadService.Credentials credentials, Autotests.UploadService.UploadOptions options, byte[] content) {
            return base.Channel.Upload(credentials, options, content);
        }
        
        public System.Threading.Tasks.Task<Autotests.UploadService.UploadResponse> UploadAsync(Autotests.UploadService.Credentials credentials, Autotests.UploadService.UploadOptions options, byte[] content) {
            return base.Channel.UploadAsync(credentials, options, content);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Autotests.UploadService.UploadStreamResponse Autotests.UploadService.IUploadService.UploadStream(Autotests.UploadService.UploadStreamRequest request) {
            return base.Channel.UploadStream(request);
        }
        
        public string UploadStream(Autotests.UploadService.Credentials Credentials, Autotests.UploadService.UploadOptions Options, System.IO.Stream ContentStream, out string Url) {
            Autotests.UploadService.UploadStreamRequest inValue = new Autotests.UploadService.UploadStreamRequest();
            inValue.Credentials = Credentials;
            inValue.Options = Options;
            inValue.ContentStream = ContentStream;
            Autotests.UploadService.UploadStreamResponse retVal = ((Autotests.UploadService.IUploadService)(this)).UploadStream(inValue);
            Url = retVal.Url;
            return retVal.Message;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Autotests.UploadService.UploadStreamResponse> Autotests.UploadService.IUploadService.UploadStreamAsync(Autotests.UploadService.UploadStreamRequest request) {
            return base.Channel.UploadStreamAsync(request);
        }
        
        public System.Threading.Tasks.Task<Autotests.UploadService.UploadStreamResponse> UploadStreamAsync(Autotests.UploadService.Credentials Credentials, Autotests.UploadService.UploadOptions Options, System.IO.Stream ContentStream) {
            Autotests.UploadService.UploadStreamRequest inValue = new Autotests.UploadService.UploadStreamRequest();
            inValue.Credentials = Credentials;
            inValue.Options = Options;
            inValue.ContentStream = ContentStream;
            return ((Autotests.UploadService.IUploadService)(this)).UploadStreamAsync(inValue);
        }
        
        public Autotests.UploadService.AuthenticationResponse Authenticate(Autotests.UploadService.Credentials credentials) {
            return base.Channel.Authenticate(credentials);
        }
        
        public System.Threading.Tasks.Task<Autotests.UploadService.AuthenticationResponse> AuthenticateAsync(Autotests.UploadService.Credentials credentials) {
            return base.Channel.AuthenticateAsync(credentials);
        }
        
        public Autotests.UploadService.SetupDriverResponse SetupDriver(Autotests.UploadService.Credentials credentials, Autotests.UploadService.SetupDriverOptions options) {
            return base.Channel.SetupDriver(credentials, options);
        }
        
        public System.Threading.Tasks.Task<Autotests.UploadService.SetupDriverResponse> SetupDriverAsync(Autotests.UploadService.Credentials credentials, Autotests.UploadService.SetupDriverOptions options) {
            return base.Channel.SetupDriverAsync(credentials, options);
        }
        
        public void UploadBootstrapperLog(Autotests.UploadService.BootstrapperLogType type, string file, string userLogin) {
            base.Channel.UploadBootstrapperLog(type, file, userLogin);
        }
        
        public System.Threading.Tasks.Task UploadBootstrapperLogAsync(Autotests.UploadService.BootstrapperLogType type, string file, string userLogin) {
            return base.Channel.UploadBootstrapperLogAsync(type, file, userLogin);
        }
    }
}
